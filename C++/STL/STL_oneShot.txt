1// STL : Standar Tempalte Libaray , this libaray is used when you have to many columns then to import that thing we used one libaray
         stl , #include #include <utility>

STL divied into 4 parts
    Funtions 
    Containers 
    Algorithm
    Iterators

Containers

Code 1 : Pairs 

void explainPair(){
    pair<int , int> p = {1,3};

    cout<<p.first<<" "<<p.second;

    pair<int ,pair<int, int>> p2 = {1,{3,4}};
   
    cout<<p2.first<<" "<<p2.second.first<<" "<<p2.second.second; 

    pair<int , int> array[] = {{1,2},{3,4},{5,6}};

    cout<array[0]<<" ";
}



Code 2 : Vectors -> vectors are like array store multiple value but dynamic in nature it will increaes the size 

void explainvectors(){

    vector<int> v;
    v.push_back(1);         // It inputs the value as 1 
    v.emplace_back(2);      // Here emplace function use to add the number and dynaimcally increaes the size of container 

    vector<pair<int,int>> vect;
    v.push_back({1,2});          
    v.emplace_back(1,2);

    vector<int> v1(5,100);      // v1(size,value);
    // above output : {100,100,100,100,100}

    vector<int> v2(5);      // v2(size) -> any garbage value 

    vector<int> v3(5,20);
    vector<int> v4(v3);     // copy of v3 vectors

    /*
    for acessing the vector value :
            -> iterators
            -> 
    ex : v->{10,15,20,25,30}


    */

    vector<int>::iterators its = v.begin();        //v.begin() goes to memory address
    its++;                                         // move to next memory location 
    cout<<*(its)<<" ";                              // *(v.begin()) gives me the value of following address 

    vector<int>::iterators it1 = v.end();            // exmaple -> vector : {10,20,30,40}    it will point after 40 value in vector
    it1--;
    cout<<*(it1)<<" ";                               // ouput : 40,30,20,10

    cout<<v.back()<<" ";                             // it will points out the last



    // There are three ways to print the vectors 

    for(vector<int>::iterator it = v.begin();it != v.end();it++){
        cout<<*(it)<<" ";
    }         

    for(auto it = v.begin();it != v.end();it++){
        cout<<*(it)<<" ";
    }

    for(auto it : v){
        cout<<it<<" ";
    }



    @@@IMp Start 
    // Deleteing vector value
    v.erase(v.begin()+1);       //{10,20,30,40}     -> {10,30,40}

    // Inserting value 
    vector<int> v(5,20);            //{20,20,20,20,20}
    v.insert(v.begin(),300)         //{300,20,20,20,20,20}
    v.insert(v.begin()+1,2,10);     //{300,10,10,20,20,20,20,20}
    @@@IMp Ends



    vector<int> copy(2,50);         //{50,50}
    v.insert(v.begin(),copy.begin(),copy.end());        //{50,50,300,10,10,20,20,20,20,20}            

    // {10,20}  -> size = 2
    cout<<v.size();

    //{10,20}   
    cout<<v.pop_back();     //{10}

    // v1-> {10,30}
    // v2 -> {20,40}
    v.swap(v2);         //v1-> {20,40} , v2-> {10,30}

    //erase the entier vector
    v.clear();

    // This return that the vector is empyt (true)or not (false)
    cout<<v.empty();

}




void explainlist(){

    list<int> ls;

    ls.push_back(2)     //{2}
    ls.emplace_back(5)      //{2,5}

    ls.push_front(4)        //{4,2,5}
    ls.emplace_front();  //{0,4,2,5}


    // rest of functions are same as vector
}


void explaindeque(){

    deque<int> dq;
    dp.push_back(5);    //{5}
    dq.emplace_back(1);     //{5,1}

    dq.push_front(4);       //{4,5,1}
    dq.emplace_front(2);    //{2,4,5,1}

    dq.pop_back();          //{2,4,5}
    dq.pop_front();         //{4,5}

    dq.back();              //{5}
    dq.front();             //{4}
    // rest of functions are same as vector

}



// Stack follows rule LIFO : Last In First Out
// Stack has 3 major operation : push(insert) , pop(removeing) , top(printitng)

void explainstack(){
    stack<int> st;
    st.push(1);     //{1}
    st.push(2);     //{2,1}
    st.push(3);     //{3,2,1}
    st.push(4);     //{4,3,2,1}
    st.emplace(5);     //{5,4,3,2,1}

    cout<<st.top;       //Output will be 5 "**Here indexing is not allowed -> st[2]**"

    st.pop();           //stack will look like this {4,3,2,1}

    cout<<st.size;      //4

    cout<<st.empty();      // Gives me false value 

    stack<int> st1,st2;
    st1.swap(st2);

}



// Queue follows rule FIFO : First In First Out

void explainQueue(){
    queue<int> q;

    q.push(1);  //{1}
    q.push(2);  //{1,2}
    q.emplace(3);  //{1,2,3}

    q.back() += 5;       //{1,2,8}   the value 5 is been added into last element 
    cout<<q.front();     //1 

    q.pop();            //{2,8}

}


// Priority queue 

void explainPQ(){
    priority_queue<int>pq;

    pq.push(5);     {5}
    pq.push(2);     {5,2}
    pq.push(8);     {8,5,2}
    pq.push(10);    {10,8,5,2}

    cout<<pq.top(); {10}

    pq.pop();       

    cout<<pq.top(); {8}



    // Mimnimum priority queue

    priority_queue<int , vector <int> , greater<int>>pq1;

    pq.push(5);     {5}
    pq.push(2);     {2,5}
    pq.push(8);     {2,5,8}
    pq.push(10);    {2,5,8,10}

    cout<<pq.top(); {2}

}




// This set stores in unique and sorted oder

void explainset(){
    set<int>st;

    st.insert(1);       {1}
    st.insert(2);       {1,2}
    st.emplace(3);      {1,2,3}
    st.insert(4);       {1,2,3,4}
    st.insert(3);       {1,2,3,4}

    auto it - st.find(3);   -> return iterator

    auto it = st.find(6);   -> st.end()

    st.erase(5);            {1,2,3,4} 
}




// Map : that stores the data in key value pair 
// unique and sorted oder

void explainmap(){
    //  key  value
    map<int ,int> mp;

    //  key      value,value
    map<int , pair<int, int>> mp1;
    
    //   key , key       value
    map<pair <int,int> , int> mp2;

    mp[1] = 2;      {1,2}
    mp.insert({3,1});
    mp.emplace({2,4});


    /*
    [{1,2},{2,4},{3,1}]
    */


    mp2({2,3}) = 10;


    for(auto it : mp){
        cout<<it.first<<" "<<it.second<<endl;
    }

    cout<<mp[1];   //     // 2
    cout<<mp[5];        // 0



}



// Vector input from user 

#include <iostream>
#include <vector>

using namespace std;

int main() {
    vector<int> vec;
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;

    cout << "Enter the elements: ";
    for(int i = 0; i < n; ++i) {
        int element;
        cin >> element;
        vec.push_back(element);
    }

    cout << "You entered: ";
    for(int i = 0; i < vec.size(); ++i) {
        cout << vec[i] << " ";
    }
    cout << endl;

    return 0;
}



// pointers 

// pointers has 4 arthematic operation => ++ , -- , + , -

// * dereference operator
   & address-of operator

#include <iostream>
using namespace std;

int main(){
    
    int a  = 10;
    int *aptr = &a;   // it makes pointer and store the location of above variable
    
    cout<<&a<<endl;
    cout<<aptr<<endl;
    
    cout<<*aptr<<endl;
    
    
    // next is to without using a varible i want to change the value 
    
    *aptr = 20;
    
    cout<<a<<endl;
    //cout<<aptr<<endl;
    
    *aptr++;
    cout<<aptr<<endl;
    
    return 0;
    
}


#include <bits/stdc++.h>
using namespace std;


int main(){
    string freepizza[5] = {"pizza1","pizza2","pizza3","pizza4","pizza5"};

    string *pfreepizza = freepizza;

    cout<<*pfreepizza<<endl;


    return 0;
}

when we increaes ++ it means the integer take 4 bytes so pointer will be increaes by 4

output : 

0x7fff5c7d1b24
0x7fff5c7d1b24
10
20
0x7fff5c7d1b28


